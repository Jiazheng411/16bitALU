// to test functionalities of alus

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig auto_test_mode;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    
      // declare seven_seg display
      autotest autotest;
  
    }
    // declare store tool
    store store;
    
  }
  alu alu;

  always {
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // whether it is auto test mode or manual testing mode; 1-auto, 0-manual
    auto_test_mode = io_dip[0][1];
    
    // manual testing
    store.store_a_sig = io_button[3]; // press left button to store dip value of a
    store.store_b_sig = io_button[4]; // press right button to store dip value of a
    store.dip[7:0] = io_dip[1];  // 8 LSB
    store.dip[15:8] = io_dip[2]; // 8 MSB
    
    alu.a = store.currenta; // alu a is store a 
    alu.b = store.currentb; // alu b is store b 
    alu.alufn = io_dip[0][7:2]; // ALUFN: 6 bit of dip 
    io_led[0][7:2] = io_dip[0][7:2]; // display ALUFN
    
    // display alu.out using leds
    io_led[2][7:0] = alu.out[15:8];
    io_led[1][7:0] = alu.out[7:0];
    
    // whether auto test will stop when error occurs
    autotest.stop_when_error = io_dip[0][0];
    
    // auto test
    if(auto_test_mode){
    io_led = autotest.leds;
    io_seg = autotest.iosegvalues;
    io_sel = autotest.ioselvalues;
    
    }
  }
  
}